// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DevelopmentTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Save a new Spreadsheet.  Test Arrow Keys too
        /// </summary>
        public void testSave1()
        {
            #region Variable Declarations
            WinEdit uIContentBoxEdit = this.UINewSpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.testSave1Params.UINewSpreadsheetWindowExePath, this.testSave1Params.UINewSpreadsheetWindowAlternateExePath);

            // Type '{Down}{Right}{Up}{Left}{LControlKey}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testSave1Params.UIContentBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testSave1Params.UIContentBoxEditSendKeys1, ModifierKeys.Control);

            // Select 'testFile' in 'File name:' combo box
            Keyboard.SendKeys(uIFilenameComboBox, this.testSave1Params.UIFilenameComboBoxEditableItem);

            // Type 'Alt + s' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.testSave1Params.UIFilenameEditSendKeys, ModifierKeys.Alt);

            // Type '=a2' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, "=a2");

            // Type '{Enter}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, "{Enter}");

            // Type 'Control + s' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testSave1Params.UIContentBoxEditSendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Loar a Large File. Change first Cell
        /// </summary>
        public void testLoad1()
        {
            #region Variable Declarations
            WinEdit uIContentBoxEdit = this.UINewSpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinEdit uIContentBoxEdit1 = this.UICUsersnerd3DocumentsWindow.UIItem10Window.UIContentBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.testLoad1Params.UINewSpreadsheetWindowExePath, this.testLoad1Params.UINewSpreadsheetWindowAlternateExePath);

            // Type 'Control + o' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testLoad1Params.UIContentBoxEditSendKeys, ModifierKeys.Control);

            // Select 'testFile' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.testLoad1Params.UIFilenameComboBoxEditableItem;

            // Type 'Alt + o' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.testLoad1Params.UIFilenameEditSendKeys, ModifierKeys.Alt);

            // Type '42' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit1, this.testLoad1Params.UIContentBoxEditText);

            // Type '{Enter}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit1, this.testLoad1Params.UIContentBoxEditSendKeys1, ModifierKeys.None);

            // Type 'Control + s' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit1, this.testSave1Params.UIContentBoxEditSendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// new spreadsheet and close
        /// </summary>
        public void testNew1()
        {
            #region Variable Declarations
            WinEdit uIContentBoxEdit = this.UINewSpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinEdit uIContentBoxEdit1 = this.UINewSpreadsheetWindow1.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.testNew1Params.UINewSpreadsheetWindowExePath, this.testNew1Params.UINewSpreadsheetWindowAlternateExePath);

            // Type '{F11}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testNew1Params.UIContentBoxEditSendKeys, ModifierKeys.None);

            // Type '{F11}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testNew1Params.UIContentBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + n' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testNew1Params.UIContentBoxEditSendKeys2, ModifierKeys.Control);

            // Type 'Alt + {F4}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit1, this.testNew1Params.UIContentBoxEditSendKeys3, ModifierKeys.Alt);

            // Type '{F1}' in 'contentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.testNew1Params.UIContentBoxEditSendKeys1, ModifierKeys.None);
        }
        
        #region Properties
        public virtual testSave1Params testSave1Params
        {
            get
            {
                if ((this.mtestSave1Params == null))
                {
                    this.mtestSave1Params = new testSave1Params();
                }
                return this.mtestSave1Params;
            }
        }
        
        public virtual testLoad1Params testLoad1Params
        {
            get
            {
                if ((this.mtestLoad1Params == null))
                {
                    this.mtestLoad1Params = new testLoad1Params();
                }
                return this.mtestLoad1Params;
            }
        }
        
        public virtual testNew1Params testNew1Params
        {
            get
            {
                if ((this.mtestNew1Params == null))
                {
                    this.mtestNew1Params = new testNew1Params();
                }
                return this.mtestNew1Params;
            }
        }
        
        public UINewSpreadsheetWindow UINewSpreadsheetWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetWindow == null))
                {
                    this.mUINewSpreadsheetWindow = new UINewSpreadsheetWindow();
                }
                return this.mUINewSpreadsheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersnerd3DocumentsWindow UICUsersnerd3DocumentsWindow
        {
            get
            {
                if ((this.mUICUsersnerd3DocumentsWindow == null))
                {
                    this.mUICUsersnerd3DocumentsWindow = new UICUsersnerd3DocumentsWindow();
                }
                return this.mUICUsersnerd3DocumentsWindow;
            }
        }
        
        public UISpreadsheetInformatiWindow UISpreadsheetInformatiWindow
        {
            get
            {
                if ((this.mUISpreadsheetInformatiWindow == null))
                {
                    this.mUISpreadsheetInformatiWindow = new UISpreadsheetInformatiWindow();
                }
                return this.mUISpreadsheetInformatiWindow;
            }
        }
        
        public UINewSpreadsheetWindow1 UINewSpreadsheetWindow1
        {
            get
            {
                if ((this.mUINewSpreadsheetWindow1 == null))
                {
                    this.mUINewSpreadsheetWindow1 = new UINewSpreadsheetWindow1();
                }
                return this.mUINewSpreadsheetWindow1;
            }
        }
        #endregion
        
        #region Fields
        private testSave1Params mtestSave1Params;
        
        private testLoad1Params mtestLoad1Params;
        
        private testNew1Params mtestNew1Params;
        
        private UINewSpreadsheetWindow mUINewSpreadsheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersnerd3DocumentsWindow mUICUsersnerd3DocumentsWindow;
        
        private UISpreadsheetInformatiWindow mUISpreadsheetInformatiWindow;
        
        private UINewSpreadsheetWindow1 mUINewSpreadsheetWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testSave1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testSave1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\cs3500\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe" +
            "";
        
        /// <summary>
        /// Type '{Down}{Right}{Up}{Left}{LControlKey}' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Down}{Right}{Up}{Left}{LControlKey}";
        
        /// <summary>
        /// Type 'Control + s' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys1 = "s";
        
        /// <summary>
        /// Select 'testFile' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testFile";
        
        /// <summary>
        /// Type 'Alt + s' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testLoad1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testLoad1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\cs3500\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe" +
            "";
        
        /// <summary>
        /// Type 'Control + o' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "o";
        
        /// <summary>
        /// Select 'testFile' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testFile";
        
        /// <summary>
        /// Type 'Alt + o' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "o";
        
        /// <summary>
        /// Type '42' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "=42";
        
        /// <summary>
        /// Type '{Enter}' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testNew1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testNew1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\cs3500\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe" +
            "";
        
        /// <summary>
        /// Type '{F11}' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{F11}";
        
        /// <summary>
        /// Type '{F11}' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys1 = "{F1}";
        
        /// <summary>
        /// Type 'Control + n' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys2 = "n";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'contentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys3 = "{F4}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetWindow : WinWindow
    {
        
        public UINewSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSpreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentBoxWindow UIContentBoxWindow
        {
            get
            {
                if ((this.mUIContentBoxWindow == null))
                {
                    this.mUIContentBoxWindow = new UIContentBoxWindow(this);
                }
                return this.mUIContentBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIContentBoxWindow mUIContentBoxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentBoxWindow : WinWindow
    {
        
        public UIContentBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentBox";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemsViewWindow UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemsViewWindow mUIItemsViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemsViewWindow : WinWindow
    {
        
        public UIItemsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICUsersnerd3DocumentsWindow : WinWindow
    {
        
        public UICUsersnerd3DocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\nerd3\\Documents\\testFile.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\nerd3\\Documents\\testFile.sprd");
            #endregion
        }
        
        #region Properties
        public UIItem10Window UIItem10Window
        {
            get
            {
                if ((this.mUIItem10Window == null))
                {
                    this.mUIItem10Window = new UIItem10Window(this);
                }
                return this.mUIItem10Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItem10Window mUIItem10Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem10Window : WinWindow
    {
        
        public UIItem10Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentBox";
            this.WindowTitles.Add("C:\\Users\\nerd3\\Documents\\testFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.WindowTitles.Add("C:\\Users\\nerd3\\Documents\\testFile.sprd");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetInformatiWindow : WinWindow
    {
        
        public UISpreadsheetInformatiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Information and Controls";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet Information and Controls");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet Information and Controls");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Spreadsheet Information and Controls");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetWindow1 : WinWindow
    {
        
        public UINewSpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSpreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentBoxWindow1 UIContentBoxWindow
        {
            get
            {
                if ((this.mUIContentBoxWindow == null))
                {
                    this.mUIContentBoxWindow = new UIContentBoxWindow1(this);
                }
                return this.mUIContentBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIContentBoxWindow1 mUIContentBoxWindow;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentBoxWindow1 : WinWindow
    {
        
        public UIContentBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentBox";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem1 UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem1(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem1 mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpMenuItem1 : WinMenuItem
    {
        
        public UIHelpMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("NewSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("NewSpreadsheet");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
}
