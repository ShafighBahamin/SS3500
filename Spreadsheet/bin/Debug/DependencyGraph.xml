<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DependencyGraph</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
             <summary>
             (s1,t1) is an ordered pair of strings
             t1 depends on s1; s1 must be evaluated before t1
             
             A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
             (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
             Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
             set, and the element is already in the set, the set remains unchanged.
             
             Given a DependencyGraph DG:
             
                (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                    (The set of things that depend on s)    
                    
                (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
                    (The set of things that s depends on) 
            
             For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
                 dependents("a") = {"b", "c"}
                 dependents("b") = {"d"}
                 dependents("c") = {}
                 dependents("d") = {"d"}
                 dependees("a") = {}
                 dependees("b") = {"a"}
                 dependees("c") = {"a"}
                 dependees("d") = {"b", "d"}
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Constructor: Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            Returns the number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s">dependee for relationship</param>
            <param name="t">dependent in relationship</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.DependencyGraph.GraphNode">
            <summary>
            <para>GraphNode serves as a holding object for all dependents and dependees of current "node."</para>
            <para>A "node" is simply defined as a variable that has some dependents and/or dependees.</para>
            <para>NOTE: The lists for each of these connections contain addresses to the other objects directly.</para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.#ctor(System.String)">
            <summary>
            Graph Node: Contains a Name and 2 lists of GraphNodes: Dependents / Dependees
            </summary>
            <param name="newName">Name of the node</param>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.GraphNode.Name">
            <summary>
            Use Key for name of node
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.addDependent(SpreadsheetUtilities.DependencyGraph.GraphNode)">
            <summary>
            Adds a reference to the given node to the Dependents list
            </summary>
            <param name="addMe">GraphNode to add to Dependents</param>
            <returns>Returns false if Node is already present in Dependents.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.removeDependent(SpreadsheetUtilities.DependencyGraph.GraphNode,System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.GraphNode})">
            <summary>
            Attempts to Remove the reference to the given node from the Dependents list
            </summary>
            <param name="rmvMe">GraphNode to remove from Dependents</param>
            <param name="parent">Parent Graph Dictionary, used for self removal</param>
            <returns>Returns true if remove was successful.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.numDependents">
            <summary>
            Counts the Dependents
            </summary>
            <returns>Returns the number of of Dependents this node has</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.GetDependents">
            <summary>
            Gets a List of current dependents
            </summary>
            <returns>List of Dependents</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.clearDependents(System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.GraphNode})">
            <summary>
            Removes all references from Dependents list
            </summary>
            <param name="parent">Parent Graph Dictionary for node self removal</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.addDependee(SpreadsheetUtilities.DependencyGraph.GraphNode)">
            <summary>
            Adds a reference to the given node to the Dependees list.
            NOTE: no external access
            </summary>
            <param name="addMe">GraphNode to add to Dependees</param>
            <returns>Returns false if Node is already present in Dependees.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.removeDependee(SpreadsheetUtilities.DependencyGraph.GraphNode,System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.GraphNode})">
            <summary>
            Attempts to Remove the reference to the given node from the Dependees list
            NOTE: no external access
            </summary>
            <param name="rmvMe">GraphNode to remove from Dependees</param>
            <param name="parent">Parent Graph Dictionary for node self removal</param>
            <returns>Returns true if remove was successful.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.numDependees">
            <summary>
            Counts the Dependees
            </summary>
            <returns>Returns the number of of Dependees this node has</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.GetDependees">
            <summary>
            Get List of Dependees
            </summary>
            <returns>List of Dependees</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GraphNode.clearDependees(System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.GraphNode})">
            <summary>
            Removes all references from Dependents list
            </summary>
            <param name="parent">Parent Graph Dictionary for node self removal</param>
        </member>
    </members>
</doc>
